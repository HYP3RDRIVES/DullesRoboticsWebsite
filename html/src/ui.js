// Generated by CoffeeScript 2.3.2
(function() {
  // CoffeeScript - UI

  //File for universal UI
  var checker;

  window.ui = {};

  ui.state = "HOME";

  ui.menuStates = new Map();

  ui.menuShows = new Map();

  //Load onecup files
  eval(onecup.import());

  window.SpecialText = (function() {
    class SpecialText {
      //Constructor for controlled text
      constructor(type, text) {
        this.type = type;
        this.text = text;
      }

    };

    SpecialText.type = "Raw";

    SpecialText.text = "Text";

    return SpecialText;

  }).call(this);

  //Convert raw text into special text
  //Special Characters:
  //<!Break>[Text]<!>  --> Creates new line
  ui.spliceText = function(text) {
    var breakPoints, foundEnd, i, index, j, k, lastIndex, len, m, n, o, p, q, r, ref, ref1, ref2, ref3, ref4, splicedText, stack, tempArray, textArray, textRef;
    textArray = [];
    tempArray = [];
    stack = [];
    breakPoints = [];
//Search text for special characters
//Check for <! first
    for (i = m = ref = text.length - 1; (ref <= 0 ? m <= 0 : m >= 0); i = ref <= 0 ? ++m : --m) {
      if (text.substring(i, i + 2) === "!>") {
        stack.push(i);
      }
    }
//Check for !> last using a stack
    for (i = n = ref1 = stack.length - 1; (ref1 <= 0 ? n <= 0 : n >= 0); i = ref1 <= 0 ? ++n : --n) {
      foundEnd = false;
      index = stack[i];
      for (j = o = ref2 = index - 2; (ref2 <= 0 ? o <= 0 : o >= 0); j = ref2 <= 0 ? ++o : --o) {
        if (text.substring(j, j + 2) === "<!") {
          foundEnd = true;
//Since we are cutting out a string, change the indices in the stack to match the new string
          for (k = p = ref3 = i - 1; (ref3 <= 0 ? p <= 0 : p >= 0); k = ref3 <= 0 ? ++p : --p) {
            stack[k] -= index - j + 2;
          }
          tempArray.push(text.substring(j + 2, index - 1));
          text = text.substring(0, j) + text.substring(index + 2, text.length);
          breakPoints.push(j);
          //console.log("Adding break point at: "+j)
          //We already found the tag for the one in the stack, break the loop now to not cut the tag again
          break;
        }
      }
      if (!foundEnd) {
        break;
      }
    }
    lastIndex = 0;
    for (i = q = 0, ref4 = breakPoints.length - 1; (0 <= ref4 ? q <= ref4 : q >= ref4); i = 0 <= ref4 ? ++q : --q) {
      index = breakPoints[i];
      textArray.push(text.substring(lastIndex, index));
      textArray.push(tempArray[i]);
      lastIndex = breakPoints[i];
    }
    if (text !== "") {
      textArray.push(text.substring(lastIndex, text.length));
    }
    splicedText = [];
    for (textRef = r = 0, len = textArray.length; r < len; textRef = ++r) {
      text = textArray[textRef];
      if (text.indexOf("Break>") !== -1) {
        text = text.substring(6, text.length);
        splicedText.push(new SpecialText("Break", text));
      } else {
        splicedText.push(new SpecialText("Raw", text));
      }
    }
    //console.log(splicedText)
    return splicedText;
  };

  //Vertically Centers Text within div
  ui.vertCentTXT = function(txt) {};

  //Changes a UI state
  ui.stateButton = function(txt, type, state, w, h, l, t) {
    return div(".dullesButton", function() {
      position("fixed");
      width(w);
      height(h);
      left(l);
      top(t);
      if (ui.menuStates.get(type) === state) {
        box_shadow("0 0 0 4px #ccffff, 0 0 0 6px #006666");
        text_shadow("0 0 10px #3333ff");
      }
      onclick(function() {
        return ui.menuStates.set(type, state);
      });
      return text(txt);
    });
  };

  //Makes a state menu that can change a state of the ui
  //states and stateNames should be the same length
  ui.stateMenu = function(type, txt, states, stateNames, x, y) {
    if (!ui.menuStates.has(type)) {
      ui.menuStates.set(type, states[0]);
    }
    if (!ui.menuShows.has(type)) {
      ui.menuShows.set(type, true);
    }
    return div(".navMenu", function() {
      var index, len, m, state;
      //Make a ui state for each state parameter
      if (ui.menuShows.get(type) !== false) {
        for (index = m = 0, len = states.length; m < len; index = ++m) {
          state = states[index];
          ui.stateButton(stateNames[index], type, state, 220, 45, x + 15, y + 58 + index * 58);
        }
      }
      left(x);
      top(y);
      width(250);
      position("fixed");
      text_align("center");
      return div(".navTitle", function() {
        text(txt);
        height("inherit");
        //Toggle menu on click
        return onclick(function() {
          if (ui.menuShows.get(type) !== false) {
            return ui.menuShows.set(type, false);
          } else {
            return ui.menuShows.set(type, true);
          }
        });
      });
    });
  };

  //Downloads a file
  ui.downloadButton = function(txt, type, state, w, h, l, t) {
    return div(".dullesButton .secondfont", function() {
      position("fixed");
      width(w);
      height(h);
      left(l);
      top(t);
      onclick(function() {
        return onecup.newTab(state);
      });
      return text(txt);
    });
  };

  //Makes a download menu that can download files
  //fileNames and buttonNames should be the same length
  ui.downloadMenu = function(type, txt, fileNames, buttonNames, x, y) {
    if (!ui.menuShows.has(type)) {
      ui.menuShows.set(type, true);
    }
    return div(".navMenu", function() {
      var file, index, len, m;
      //Make a ui state for each state parameter
      if (ui.menuShows.get(type) !== false) {
        for (index = m = 0, len = fileNames.length; m < len; index = ++m) {
          file = fileNames[index];
          ui.downloadButton(buttonNames[index], type, file, 220, 45, x + 15, y + 58 + index * 58);
        }
      }
      left(x);
      top(y);
      width(250);
      position("fixed");
      text_align("center");
      return div(".navTitle", function() {
        text(txt);
        height("inherit");
        //Toggle menu on click
        return onclick(function() {
          if (ui.menuShows.get(type) !== false) {
            return ui.menuShows.set(type, false);
          } else {
            return ui.menuShows.set(type, true);
          }
        });
      });
    });
  };

  //Makes a nav bar button
  ui.navButton = function(menu, name, x, y) {
    return div(".navButton", function() {
      left(x);
      top(y);
      if (ui.state === name) {
        box_shadow("0 0 0 4px #ccffff, 0 0 0 6px #006666");
        text_shadow("0 0 10px #3333ff");
      }
      onclick(function() {
        if (menu === false) {
          onecup.goto(name + ".html");
          return ui.state = name;
        }
      });
      return text(name);
    });
  };

  //UI Navigation Function
  ui.nav = function() {
    var navBorderLength, navWidth;
    navWidth = window.innerWidth - 30;
    navBorderLength = 12;
    return div(".navBar", function() {
      width(navWidth);
      position("relative");
      font_family("NavButtonFont");
      top("10px");
      margin("auto");
      height("120px");
      //Website Title
      div(function() {
        position("relative");
        font_family("NavButtonFont");
        margin("auto");
        text_align("center");
        text("DULLES ROBOTICS");
        return font_size("60px");
      });
      //HOME BUTTON
      ui.navButton(false, "HOME", window.innerWidth - 445, 40);
      //ABOUT Button
      ui.navButton(false, "ABOUT", window.innerWidth - 325, 40);
      //BLOG BUTTON
      ui.navButton(false, "BLOG", window.innerWidth - 205, 40);
      //MEDIA BUTTON
      ui.navButton(false, "MEDIA", window.innerWidth - 510, 78);
      //DOCUMENTS BUTTON
      ui.navButton(false, "DOCUMENTS", window.innerWidth - 390, 78);
      //CONTACT BUTTON
      ui.navButton(false, "CONTACT", window.innerWidth - 270, 78);
      //MORE Button
      return ui.navButton(true, "MORE", window.innerWidth - 150, 78);
    });
  };

  //Main UI Function
  //Use window.body so we don't see page flickering - Onecup.refresh flickers
  window.body = function() {
    if (ui.onecup == null) {
      ui.onecup = onecup.body;
    }
    //Main Div
    return div(function() {
      position("relative");
      width(window.innerWidth);
      height(window.innerHeight);
      overflow_y("auto");
      ui.nav();
      switch (ui.state) {
        case "HOME":
          ui.home();
          break;
        case "ABOUT":
          ui.about();
          break;
        case "BLOG":
          ui.blogging();
          break;
        case "MEDIA":
          ui.media();
          break;
        case "DOCUMENTS":
          ui.documents();
          break;
        case "CONTACT":
          ui.contact();
          break;
      }
    });
  };

  //Reappend an element to onecup
  ui.putOnOnecup = function(div) {
    return ui.onecup.appendChild(div);
  };

  //Make sure widgets aren't on unless we are in the correct state
  checker = function() {
    if (ui.twitterDiv == null) {
      ui.twitterDiv = document.getElementById("twitter-widget-0");
    }
    if (ui.facebookDiv == null) {
      ui.facebookDiv = document.getElementById("facebook");
    }
    if (ui.instagramDiv == null) {
      ui.instagramDiv = document.getElementById("instagram");
    }
    if (ui.remindDiv == null) {
      ui.remindDiv = document.getElementById("remind101-widget-0");
    }
    if (ui.state !== "MEDIA") {
      if (ui.twitterDiv) {
        ui.twitterDiv.style.visibility = "hidden";
      }
      if (ui.facebookDiv) {
        ui.facebookDiv.style.visibility = "hidden";
      }
      if (ui.instagramDiv) {
        ui.instagramDiv.style.visibility = "hidden";
      }
      if (ui.remindDiv) {
        ui.remindDiv.style.visibility = "hidden";
      }
    }
    if ((ui.twitterDiv != null) && ui.twitterDiv.parentNode !== ui.onecup && ui.state !== "MEDIA") {
      //Add stuff to onecup if not added
      ui.onecup.appendChild(ui.twitterDiv);
    }
    if ((ui.facebookDiv != null) && ui.facebookDiv.parentNode !== ui.onecup && ui.state !== "MEDIA") {
      ui.onecup.appendChild(ui.facebookDiv);
    }
    if ((ui.instagramDiv != null) && ui.instagramDiv.parentNode !== ui.onecup && ui.state !== "MEDIA") {
      ui.onecup.appendChild(ui.instagramDiv);
    }
    if ((ui.remindDiv != null) && ui.remindDiv.parentNode !== ui.onecup && ui.state !== "MEDIA") {
      ui.onecup.appendChild(ui.remindDiv);
    }
    if (ui.mediaCheck != null) {
      return ui.mediaCheck();
    }
  };

  //Check every 30 ms
  setInterval(checker, 30);

}).call(this);
