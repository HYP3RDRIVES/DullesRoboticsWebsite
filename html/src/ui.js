// Generated by CoffeeScript 1.12.8
(function() {
  var checker, makeLoginScreen;

  window.ui = {};

  ui.state = "HOME";

  ui.logging = false;

  ui.menuStates = new Map();

  ui.menuShows = new Map();

  ui.enlargeables = new Map();

  ui.shiftables = new Map();

  ui.customizables = new Map();

  ui.customEvents = new Map();

  eval(onecup["import"]());

  window.SpecialText = (function() {
    SpecialText.type = "Raw";

    SpecialText.text = "Text";

    function SpecialText(type, text) {
      this.type = type;
      this.text = text;
    }

    return SpecialText;

  })();

  ui.spliceText = function(text) {
    var breakPoints, foundEnd, i, index, j, k, lastIndex, len, m, n, o, p, q, r, ref, ref1, ref2, ref3, ref4, splicedText, stack, tempArray, textArray, textRef;
    textArray = [];
    tempArray = [];
    stack = [];
    breakPoints = [];
    for (i = m = ref = text.length - 1; ref <= 0 ? m <= 0 : m >= 0; i = ref <= 0 ? ++m : --m) {
      if (text.substring(i, i + 2) === "!>") {
        stack.push(i);
      }
    }
    for (i = n = ref1 = stack.length - 1; ref1 <= 0 ? n <= 0 : n >= 0; i = ref1 <= 0 ? ++n : --n) {
      foundEnd = false;
      index = stack[i];
      for (j = o = ref2 = index - 2; ref2 <= 0 ? o <= 0 : o >= 0; j = ref2 <= 0 ? ++o : --o) {
        if (text.substring(j, j + 2) === "<!") {
          foundEnd = true;
          for (k = p = ref3 = i - 1; ref3 <= 0 ? p <= 0 : p >= 0; k = ref3 <= 0 ? ++p : --p) {
            stack[k] -= index - j + 2;
          }
          tempArray.push(text.substring(j + 2, index - 1));
          text = text.substring(0, j) + text.substring(index + 2, text.length);
          breakPoints.push(j);
          break;
        }
      }
      if (!foundEnd) {
        break;
      }
    }
    lastIndex = 0;
    for (i = q = 0, ref4 = breakPoints.length - 1; 0 <= ref4 ? q <= ref4 : q >= ref4; i = 0 <= ref4 ? ++q : --q) {
      index = breakPoints[i];
      textArray.push(text.substring(lastIndex, index));
      textArray.push(tempArray[i]);
      lastIndex = breakPoints[i];
    }
    if (text !== "") {
      textArray.push(text.substring(lastIndex, text.length));
    }
    splicedText = [];
    for (textRef = r = 0, len = textArray.length; r < len; textRef = ++r) {
      text = textArray[textRef];
      if (text.indexOf("Break>") !== -1) {
        text = text.substring(6, text.length);
        splicedText.push(new SpecialText("Break", text));
      } else {
        splicedText.push(new SpecialText("Raw", text));
      }
    }
    return splicedText;
  };

  ui.vertCentTXT = function(txt) {};

  ui.dispatchEvents = function(divs, eventName) {
    var div, i, index, len, m, results;
    results = [];
    for (index = m = 0, len = divs.length; m < len; index = ++m) {
      i = divs[index];
      div = document.getElementById(i);
      console.log(i);
      if (div) {
        results.push(div.dispatchEvent(ui.customEvents.get(eventName)));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  ui.enlargeable = function(divName) {
    var div;
    div = document.getElementById(divName);
    if (div === void 0 || (div == null)) {
      return;
    }
    if (ui.enlargeables.has(divName)) {
      return;
    }
    div.addEventListener("mouseenter", function() {
      div.style.transition = "all 0.5s ease-out";
      return div.style.transform = "scale(1.5,1.5)";
    });
    div.addEventListener("mouseleave", function() {
      div.style.transition = "all 0.5s ease-out";
      return div.style.transform = "scale(1,1)";
    });
    ui.enlargeables.set(divName, true);
    return true;
  };

  ui.shiftable = function(divName, leftShift, topShift) {
    var div;
    div = document.getElementById(divName);
    if (div === void 0 || (div == null)) {
      return;
    }
    if (ui.shiftables.has(divName)) {
      return;
    }
    div.addEventListener("mouseenter", function() {
      div.style.transition = "all 0.5s ease-out";
      div.style.left = (div.offsetLeft + leftShift) + "px";
      return div.style.top = (div.offsetTop + topShift) + "px";
    });
    div.addEventListener("mouseleave", function() {
      div.style.transition = "all 0.5s ease-out";
      div.style.left = (div.offsetLeft - leftShift) + "px";
      return div.style.top = (div.offsetTop - topShift) + "px";
    });
    ui.shiftables.set(divName, true);
    return true;
  };

  ui.customizableByEvent = function(divName, eventName, func) {
    var div;
    div = document.getElementById(divName);
    if (div === void 0 || (div == null)) {
      return;
    }
    if (continous === false && ui.customizables.has(divName)) {
      return;
    }
    console.log(divName + ", " + eventName + ", " + func);
    div.addEventListener(eventName, function() {
      console.log(eventName + " dispatched!");
      return func(div);
    });
    ui.customizables.set(divName, true);
    return true;
  };

  ui.customizable = function() {};

  ui.stateButton = function(txt, type, state, w, h, l, t, z, background) {
    var button;
    button = div("#" + type + state + ".dullesButton", function() {
      position("fixed");
      width(w);
      height(h);
      left(l);
      top(t);
      z_index(z);
      transition("all 0.2s ease-out");

      /* Deprecated -> Don't Use
          ui.customizable(type+state, type, true, func = (mDiv) ->
              bg = document.getElementById("#{type}Background")
              if bg? and bg != undefined and mDiv? and mDiv != undefined
                  console.log("Border Found!")
                  bgBorder = bg.getBoundingClientRect()
                  ourBorder = mDiv.getBoundingClientRect()
                  console.log(ourBorder)
                  console.log(bgBorder)
                  console.log(bgBorder.bottom-ourBorder.bottom)
                  if bgBorder.bottom-ourBorder.bottom <= 0
                      mDiv.style.opacity = "0"
                  else
                      mDiv.style.opacity = "1")
       */
      if (ui.menuShows.get(type) !== false) {
        opacity("1");
      } else {
        opacity("0");
      }
      if (ui.menuStates.get(type) === state) {
        box_shadow("0 0 0 4px #ccffff, 0 0 0 6px #006666");
        text_shadow("0 0 10px #3333ff");
      }
      onclick(function() {
        return ui.menuStates.set(type, state);
      });
      return text(txt);
    });
    return button;
  };

  ui.stateMenu = function(type, txt, states, stateNames, x, y, z, background) {
    var buttons, event;
    if (!ui.menuStates.has(type)) {
      ui.menuStates.set(type, states[0]);
    }
    if (!ui.menuShows.has(type)) {
      ui.menuShows.set(type, true);
    }
    if (!ui.customEvents.has(type)) {
      event = new Event(type);
      ui.customEvents.set(type, event);
    }
    buttons = [];
    if (background === true) {
      div("#" + type + "Background.menu", function() {
        left(x - 5);
        top(y - 5);
        width(260);
        height(ui.menuShows.get(type) === true ? 60 + states.length * 59 : 60);
        return position("absolute");
      });

      /* Deprecated
      div "##{type}Cover.menu" , ->
          left x-5
          top if ui.menuShows.get(type) == true then y-55+states.length*59 else y+55
          width 260
          height if ui.menuShows.get(type) == true then 0 else states.length*59
          z_index "#{z+1}"
          position "absolute"
          border "hidden"
          background_color "rgba(0,0,0,0.8)"
       */
    }
    return div("#" + type + ".navMenu", function() {
      var index, len, m, state;
      for (index = m = 0, len = states.length; m < len; index = ++m) {
        state = states[index];
        ui.stateButton(stateNames[index], type, state, 220, 45, x + 15, y + 58 + index * 58, z, background);
        if (buttons.length !== states.length) {
          buttons.push(type + state);
        }
      }
      left(x);
      top(y);
      z_index(z);
      width(250);
      position("fixed");
      text_align("center");
      return div(".navTitle", function() {
        text(txt);
        height("inherit");
        return onclick(function() {
          if (ui.menuShows.get(type) !== false) {
            return ui.menuShows.set(type, false);
          } else {
            return ui.menuShows.set(type, true);
          }
        });
      });
    });
  };

  ui.downloadButton = function(txt, type, state, w, h, l, t) {
    return div(".dullesButton .secondfont", function() {
      position("fixed");
      width(w);
      height(h);
      left(l);
      top(t);
      onclick(function() {
        return onecup.newTab(state);
      });
      return text(txt);
    });
  };

  ui.downloadMenu = function(type, txt, fileNames, buttonNames, x, y) {
    if (!ui.menuShows.has(type)) {
      ui.menuShows.set(type, true);
    }
    return div(".navMenu", function() {
      var file, index, len, m;
      if (ui.menuShows.get(type) !== false) {
        for (index = m = 0, len = fileNames.length; m < len; index = ++m) {
          file = fileNames[index];
          ui.downloadButton(buttonNames[index], type, file, 220, 45, x + 15, y + 58 + index * 58);
        }
      }
      left(x);
      top(y);
      width(250);
      position("fixed");
      text_align("center");
      return div(".navTitle", function() {
        text(txt);
        height("inherit");
        return onclick(function() {
          if (ui.menuShows.get(type) !== false) {
            return ui.menuShows.set(type, false);
          } else {
            return ui.menuShows.set(type, true);
          }
        });
      });
    });
  };

  makeLoginScreen = function() {};

  ui.navButton = function(menu, name, x, y) {
    return div(".navButton", function() {
      left(x);
      top(y);
      if (ui.state === name) {
        box_shadow("0 0 0 4px #ccffff, 0 0 0 6px #006666");
        text_shadow("0 0 10px #3333ff");
      }
      onclick(function() {
        if (menu === false) {
          window.location.assign(name + ".html");
          return ui.state = name;
        }
      });
      return text(name);
    });
  };

  ui.LogoButton = function(name, link, width, height, src, position) {
    return div(".navButton", function() {
      if (ui.state === name) {
        box_shadow("0 0 0 4px #ccffff, 0 0 0 6px #006666");
        text_shadow("0 0 10px #3333ff");
      }
      onclick(function() {
        if (menu === false) {
          window.location.assign(name + ".html");
          return ui.state = name;
        }
      });
      return text(name);
    });
  };

  ui.nav = function() {
    var navBorderLength, navWidth;
    navWidth = window.innerWidth - 30;
    navBorderLength = 12;
    return div(".navBar", function() {
      width(navWidth);
      position("relative");
      font_family("NavButtonFont");
      top("10px");
      margin("auto");
      height("120px");
      div(function() {
        position("absolute");
        font_family("NavButtonFont");
        top(0);
        left(0);
        right(0);
        bottom(0);
        margin("auto");
        text_align("center");
        text("DULLES ROBOTICS");
        return font_size("60px");
      });
      img("#FRCLogo", {
        width: "60px",
        height: "60px",
        src: "imgs/FRCTeamLogo.jpeg"
      }, function() {
        return position("relative");
      });
      img("#BigRedLogo", {
        width: "60px",
        height: "60px",
        src: "imgs/BigRedTeamLogo.jpeg"
      }, function() {
        return position("relative");
      });
      ui.LogoButton(img("#RoboVikesLogo", "robovikes", {
        width: "60px",
        height: "60px",
        src: "imgs/RoboVikesTeamLogo.jpeg"
      }, function() {
        return position("relative");
      }));
      ui.navButton(false, "HOME", window.innerWidth - 445, 40);
      ui.navButton(false, "ABOUT", window.innerWidth - 325, 40);
      ui.navButton(false, "BLOG", window.innerWidth - 205, 40);
      ui.navButton(false, "MEDIA", window.innerWidth - 510, 78);
      ui.navButton(false, "DOCUMENTS", window.innerWidth - 390, 78);
      ui.navButton(false, "CONTACT", window.innerWidth - 270, 78);
      ui.navButton(true, "MORE", window.innerWidth - 150, 78);
      div("#LoginButtonContainer", function() {
        position("absolute");
        top("10px");
        right("25px");
        width("20px");
        height("20px");
        z_index("2");
        return i("#LoginButton.fas fa-rocket", function() {
          font_size("30px");
          return onmousedown(function() {
            return ui.logging = true;
          });
        });
      });
      return makeLoginScreen();
    });
  };

  window.body = function() {

    /*img src: "imgs/sitebg.png", width: window.innerWidth, height: window.innerHeight, ->
        position "absolute"
        background_size "100% 100%"
        display "block"
        top "0"
        overflow "hidden"
        #margin_left "0"
        #margin_right "0"
     */
    if (ui.onecup == null) {
      ui.onecup = onecup.body;
    }
    div("#MainContainer", function() {
      return div("#MainDiv", function() {
        position("relative");
        width(window.innerWidth);
        height(window.innerHeight);
        overflow_y("auto");
        ui.nav();
        switch (ui.state) {
          case "HOME":
            ui.home();
            break;
          case "ABOUT":
            ui.about();
            break;
          case "BLOG":
            ui.blogging();
            break;
          case "MEDIA":
            ui.media();
            break;
          case "DOCUMENTS":
            ui.documents();
            break;
          case "CONTACT":
            if (ui.contact != null) {
              ui.contact();
            }
            break;
          case "CB":
            ui.cb();
            break;
        }
      });
    });
    if (ui.logging === true) {
      return div(function() {
        ui.login();
        position("-webkit-fixed");
        position("fixed");
        left(0);
        top(0);
        width(window.innerWidth);
        height(window.innerHeight);
        z_index("4");
        return background_color("rgba(0, 13, 26,0.8)");
      });
    }
  };

  ui.putOnOnecup = function(div) {
    return ui.onecup.appendChild(div);
  };

  checker = function() {
    ui.enlargeable("FRCLogo");
    ui.enlargeable("BigRedLogo");
    ui.enlargeable("RoboVikesLogo");
    ui.shiftable("LoginButtonContainer", -10, 0);
    if (ui.twitterDiv == null) {
      ui.twitterDiv = document.getElementById("twitter-widget-0");
    }
    if (ui.facebookDiv == null) {
      ui.facebookDiv = document.getElementById("facebook");
    }
    if (ui.instagramDiv == null) {
      ui.instagramDiv = document.getElementById("instagram");
    }
    if (ui.remindDiv == null) {
      ui.remindDiv = document.getElementById("remind101-widget-0");
    }
    if (ui.state !== "MEDIA") {
      if (ui.twitterDiv != null) {
        ui.twitterDiv.style.visibility = "hidden";
      }
      if (ui.facebookDiv != null) {
        ui.facebookDiv.style.visibility = "hidden";
      }
      if (ui.instagramDiv != null) {
        ui.instagramDiv.style.visibility = "hidden";
      }
      if (ui.remindDiv != null) {
        ui.remindDiv.style.visibility = "hidden";
      }
    }
    if ((ui.twitterDiv != null) && ui.twitterDiv.parentNode !== ui.onecup && ui.state !== "MEDIA") {
      ui.onecup.appendChild(ui.twitterDiv);
    }
    if ((ui.facebookDiv != null) && ui.facebookDiv.parentNode !== ui.onecup && ui.state !== "MEDIA") {
      ui.onecup.appendChild(ui.facebookDiv);
    }
    if ((ui.instagramDiv != null) && ui.instagramDiv.parentNode !== ui.onecup && ui.state !== "MEDIA") {
      ui.onecup.appendChild(ui.instagramDiv);
    }
    if ((ui.remindDiv != null) && ui.remindDiv.parentNode !== ui.onecup && ui.state !== "MEDIA") {
      ui.onecup.appendChild(ui.remindDiv);
    }
    if (ui.mediaCheck != null) {
      return ui.mediaCheck();
    }
  };

  setInterval(checker, 30);

}).call(this);
